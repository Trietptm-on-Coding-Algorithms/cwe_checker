/// The main trait describing an abstract domain.
///
/// Each abstract domain is partially ordered, has a maximal element (which can be generated by `top()`)
/// and a minimal element (which can be generated by `bottom()`).
/// Abstract domains of the same type can be merged or intersected.
/// Since often only one of these two functions is relevant in practice, default implementations are provided for both.
pub trait AbstractDomain: Sized + PartialOrd + Eq + Clone {
    fn bottom() -> Self;
    fn top() -> Self;

    fn merge(&self, other: &Self) -> Self {
        if self == other {
            self.clone()
        } else {
            Self::top()
        }
    }

    fn intersect(&self, other: &Self) -> Self {
        if self == other {
            self.clone()
        } else {
            Self::bottom()
        }
    }
}
